# Version - 0.1.6bf

# –§–∏—á–∏:
# + –ü—Ä–æ–π–¥–µ–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
# + –ü—Ä–æ–π–¥–µ–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å
# + –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É—Å–ª–æ–≤–∏–µ –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é 10.000 —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å Yes / No
# + –î–æ–ø–∏—Å–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ % –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω –ø–ª–∞–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤ –≤ 10000
# + –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—É —Ü–≤–µ—Ç–æ–≤. –ß—Ç–æ –±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–ª–∞—Å—å
# + –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Min / Max –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–Ω—è –∑–∞ –≤—Ä–µ–º—è —á–µ–ª–µ–Ω–¥–∂–∞
# + –î–æ–±–∞–≤–∏—Ç—å –∫–º –∑–∞ –≤—á–µ—Ä–∞ –∏ —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∫–∞–∫ —É –ø—Ä–æ–π–¥–µ–Ω—ã—Ö —à–∞–≥–æ–≤
# + –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–π–¥–µ–Ω–æ–≥–æ —Ä–∞—Å—Ç–æ—è–Ω–∏—è, –ø–æ —Ä–∞–∑–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º. –û—Ç –ö–∏–µ–≤–∞, –∏ –≤ —Å—Ç–æ—Ä–æ–Ω—É –õ—å–≤–æ–≤–∞. –î–æ–±–∞–≤–∏–ª —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ñ–∏—Ç–æ–º–∏—Ä–∞, —Ç–∞–∫, –∫–∞–∫ –ª—É—á—à–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—Å—å –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
# + –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ kcal (1 kcal = 35 —à–∞–≥–æ–≤) (–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ –±—ã —Å–∂–µ—á—å 1 –∫–∫–∞–ª)
# + –î–æ–±–∞–≤–∏—Ç—å —Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –ø—Ä–∏–±—ã—Ç–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥
# + –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∫–æ–¥ f" —Ñ–æ—Ä–º–∞—Ç. –ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É—á–∏ "+". –ê —Ç–æ, —Å–ª–æ–∂–Ω–æ –ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥, –∏ –Ω–∏—Ñ–∏–≥–∞ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ
# + –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞ —à–∞–≥–æ–≤, –¥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ 10–∫.
# + –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–∂–∂—ë–Ω–Ω—ã—Ö –∫–≥ –∂–∏—Ä–∞, –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—É Big Mac
# + –ò–∑–º–µ–Ω–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤
# + –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ–±—â–µ–≥–æ –∑–∞–ø–∞—Å–∞ —à–∞–≥–æ–≤
# + –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–Ω–µ–π –≤ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤, –∏ –ø–µ—Ä–µ—Å—á–µ—Ç –≤ %.
# + –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏.
# + –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤.
# + –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —à–∞–≥–æ–≤ + —Å—Ä–µ–¥–Ω—è—è –º–µ–¥–∏–∞–Ω–Ω–∞—è –ø–æ –¥–Ω—è–º)
# + –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ *.csv —Ñ–∞–π–ª–∞
# + –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å.
# + –ü–æ–∫–∞–∑–∞—Ç—å 10 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å.
# + –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –±–µ–≥—É—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
# + –ò–∫–æ–Ω–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —á–µ–ª–æ–≤–µ—á–∫–∞, –∏ —Å–∫–æ–ª—å–∫–æ –æ–Ω –¥–Ω–µ–π –ø—Ä–æ—à–µ–ª üèÅ_____üèÉ____üö©
# + –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π +- —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–π –º–µ–ª–∏–∞–Ω–Ω–æ–π –ø–æ —à–∞–≥–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
# + –î–æ–±–∞–≤–∏—Ç—å +- –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ 30/90/180/360 –¥–Ω–µ–π.


# –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–¥–µ–∏ —Å –∞—á–∏–≤–∫–∞–º–∏:
# ++ –ü—Ä–æ–π—Ç–∏ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å: 10–∫/20–∫/30–∫/40–∫/50–∫/100–∫
# ++ –ü—Ä–æ–π—Ç–∏ –≤ –æ–±—â–µ–º: 10.000/100.000/1.000.000/25.000.000/50.000.000 —à–∞–≥–æ–≤
# ++ –ü—Ä–æ–π—Ç–∏: 1/5/10/20/42.195/50/100 –∫–º –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.
# ++ –ü—Ä–æ–π—Ç–∏ –≤ –æ–±—â–µ–º –∫–º: 10/100/500/1.000/5.000/10.000/20.000 –∫–º

#  –ò–¥–µ–∏:
# –ê—á–∏–≤–∫–∏. –ó–∞ –∞—á–∏–≤–∫–∏ –º–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª—è—Ç—å –±–∞–ª–ª—ã.
# –¢–µ–º–∞—Ç–∏–∫–∏ –∞—á–∏–≤–æ–∫: (–ö–æ–ª-–≤–æ —à–∞–≥–æ–≤, –∫–æ–ª-–≤–æ –∫–º, —Å—ä–µ–∫–æ–Ω–æ–º–ª–µ–Ω–æ –ª —Ç–æ–ø–ª–∏–≤–∞, –∫–í—Ç, BigBac)
# –ü—Ä–æ–π—Ç–∏: 10–∫ —à–∞–≥–æ–≤ 1/5/10/25/50/100/200/500/1000 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥. (–ù–µ –ø–æ–¥—Ä—è–¥,  –∞ –≤–æ–æ–±—â–µ).
# –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å n kcal –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.
# –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å n kcal –≤ –æ–±—â–µ–º.
# –°–∂–µ—á—å x –∫–≥ –∂–∏—Ä–∞ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥—å–±—ã: 1/5/10/25/50/100 –∫–≥
# –ü—Ä–æ–π—Ç–∏ –≤ n –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ 1.000/5.000/10.000/25.000 —à–∞–≥–æ–≤.
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤ n –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤.
# –ü—Ä–æ–π—Ç–∏ –≤ n –º–µ—Å—è—Ü x —à–∞–≥–æ–≤.
# –ü—Ä–æ–π—Ç–∏ –≤ n –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ x —à–∞–≥–æ–≤
# –ü—Ä–æ–π—Ç–∏ –≤ n –≤—Ä–µ–º—è –¥–Ω—è (00:00-00:59) —Ö —à–∞–≥–æ–≤.
# –ü—Ä–æ–π—Ç–∏ –∑–∞ –æ–¥–∏–Ω —á–∞—Å x —à–∞–≥–æ–≤.
# –î–æ–π—Ç–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–π (–ù–∞–¥ –≥–æ—Ä–æ–¥–∞–º–∏ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å)
# –•–æ–¥–∏—Ç—å –ø–æ–¥—Ä—è–¥ –±–æ–ª–µ–µ —Ö –¥–Ω–µ–π (100/200/365 –¥–Ω–µ–π) (–•–æ–¥—å–±–æ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤ –¥–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 1–∫ —à–∞–≥–æ–≤.
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª-–≤–∞ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥, –≤ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–ª–µ–Ω–¥–∂–∞ –≤ 10–∫ —à–∞–≥–æ–≤. (–ü–æ —Ç–∏–ø—É –∫–∞–∫ —Å –¥–Ω—è–º–∏ —á–µ–ª–µ–Ω–¥–∂–∞)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ + –∏–ª–∏ - —à–∞–≥–æ–≤ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∫–æ–ª-–≤—É —à–∞–≥–æ–≤, –∏ –º–µ–¥–∏–∞–Ω–Ω–æ–π.
# –õ–æ–≥–æ—Ç–∏–ø –≤ –≤–µ—Ä—Ö—É, –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
# –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–¥–ø–∏—Å–∏: "Start Calculating", "Calculetting statistic X" (–ü—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è)
# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å –ø–æ–º–æ—â—å—é Plotly Scattermapbox.
# –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–æ–≤: –ø–æ –¥–Ω—è–º, –ø–æ –∫–∞—Ä—Ç–µ
# –ü–æ–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ (–í –°—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å), –≤–æ–∑–º–æ–∂–Ω–æ –∏ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö. –ü—Ä–æ–ø–∏—Å–∞–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ü–≤–µ—Ç, –∞ –Ω—É–∂–Ω–æ, —á—Ç–æ –±—ã —Ü–≤–µ—Ç –º–µ–Ω—è–ª—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è –∏–ª–∏ –µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
# –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –æ–∫–æ–Ω—á–∞–Ω–∏—è–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: "–¥–Ω–µ–π", "—à–∞–≥–æ–≤".
# –î–æ–ø–∏—Å–∞—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π "–¥–Ω–µ–π", "—à–∞–≥–æ–≤", –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥—É–ª–æ–∫. –í MiFit –ø–æ—è–≤–∏–ª–∞—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –¥–Ω—è–º. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å –¥–ª–∏–ª–∞—Å—å –ø—Ä–æ–≥—É–ª–∫–∞. (–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏)
# –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Å–∞–º –ø—Ä–æ–≥—É–ª–æ–∫: –≤ –∫–æ—Ç–æ—Ä–æ–º —á–∞—Å—É –±–æ–ª—å—à–µ —Å–¥–µ–ª–∞–Ω–æ —à–∞–≥–æ–≤, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ç–æ–∫, –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å.
# –í–ª–∏—è–Ω–∏–µ –∫–æ–ª-–≤–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞. 


# –ù–∞—á–∞–ª–æ Challenge - 26.08.2021 (–ß—Ç).


from colorama import Fore, Back, Style
import math
import time
import statistics
import matplotlib.pyplot as plt
import csv

start_time = time.time()

#####################################################
### Settings ###
#####################################################
# –í–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
is_settings_steps_graph = False        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —à–∞–≥–∞–º
is_setting_days_week_average = False    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
is_setting_hour_statistics = False     # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª-–≤—É —à–∞–≥–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Å –¥–Ω—è.
is_setting_month_year_stat_steps = False     # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª-–≤—É —à–∞–≥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
is_setting_achievement = True           # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—á–∏–≤–æ–∫


with open("ACTIVITY_STEPS_ALL_TIME.csv") as file_steps:
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª *.cvs —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —à–∞–≥–∞—Ö.
    file_reader_steps = csv.DictReader(file_steps, delimiter=';')
    steps = []  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞

    # –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–≥–∞–º –∏–∑ —Ñ–∞–π–ª–∞
    for row in file_reader_steps:
        steps.append(int(row["steps"]))

# !!!!!! –ù–∞—á–∞–ª–æ –≤ —á–µ—Ç–≤–µ—Ä–≥!!!!!!! (22.02.2018)
#STEPS = [11250, 10129, 13325, 10903, 4283, 13402, 6001, 8433, 12340, 15317, 7331, 14092, 6529, 8929, 8590, 9016, 5176, 7964, 5041, 10447, 7748, 16176, 7354, 9748, 7404, 6185, 9049, 12302, 8499, 7304, 5944, 14642, 15029, 7825, 7820, 7725, 12096, 9241, 14665, 8663, 13457, 13689, 12042, 12492, 10047, 9084, 7876, 14702, 8321, 13574, 8091, 9607, 9322, 15743, 13160, 12149, 8339, 7670, 9130, 10577, 15922, 11067, 4878, 7849, 9254, 16903, 4635, 11003, 15838, 5250, 11170, 7778, 4833, 10242, 7750, 5983, 6888, 7767, 9230, 13041, 5703, 6417, 5059, 9492, 10403, 9229, 9197, 11142, 9994, 12215, 13026, 5160, 6735, 8595, 4043, 23900, 15544, 17496, 14280, 20023, 24675, 5253, 8814, 7815, 7015, 9443, 7652, 9340, 5429, 14233, 11331, 8183, 10062, 11720, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 6807, 21308, 29087, 21713, 13902, 9733, 5504, 8864, 5008, 8733, 10705, 8500, 6303, 11168, 13079, 8927, 13226, 10098, 9226, 10971, 10006, 13079, 17399, 2606, 6576, 6750, 6416, 8405, 8018, 14024, 5869, 4618, 10446, 11039, 9846, 10816, 10071, 5918, 12686, 5905, 10322, 7737, 7317, 7759, 3743, 10373, 9009, 9858, 5483, 4257, 5972, 7872, 10161, 9065, 6243, 4337, 8056, 21403, 23031, 4752, 14283, 4124, 6402, 7173, 4812, 5457, 10015, 9078, 5578, 6118, 11576, 4768, 7885, 4967, 4971, 10740, 5490, 16741, 21248, 13586, 13266, 10533, 13678, 17908, 12216, 14416, 8817, 11225, 23197, 3710, 4074, 4573, 4455, 2945, 7010, 7159, 6376, 5890, 2236, 12641, 5217, 11015, 5032, 7385, 9185, 14290, 7053, 4209, 12427, 1848, 5206, 6717, 8197, 6145, 8643, 5603, 6924, 8111, 4455, 2579, 4630, 5558, 5086, 10607, 4305, 12203, 8302, 7230, 7613, 5187, 8021, 4472, 5038, 8102, 8451, 4755, 2316, 1796, 2064, 5683, 2623, 5054, 6048, 5095, 7814, 12764, 13059, 10167, 10065, 15051, 19631, 8524, 8301, 7836, 10515, 10310, 10750, 9705, 17561, 9083, 11125, 11448, 9643, 10575, 20082, 13514, 11369, 10940, 15996, 7808, 11025, 6340, 8436, 8908, 7757, 7374, 5937, 27450, 8918, 7576, 11614, 10427, 11093, 4140, 14495, 8044, 10294, 15065, 7086, 10787, 9270, 9155, 11993, 2044, 10076, 10693, 10055, 9382, 9208, 12487, 12910, 6940, 15705, 13240, 16443, 14586, 10632, 7963, 8848, 11108, 9444, 6849, 9180, 14521, 12378, 7445, 8310, 7206, 9554, 8334, 7975, 10750, 9498, 13804, 15539, 24380, 19313, 10982, 3840, 16915, 10916, 6396, 6859, 5011, 5313, 7116, 7751, 4266, 5823, 8075, 2870, 3991, 8500, 6617, 7202, 7265, 7179, 11447, 5306, 10431, 9011, 5276, 10561, 10272, 6900, 12419, 3661, 5144, 20053, 13449, 18045, 10672, 7611, 10155, 11764, 8556, 4076, 5580, 4110, 2879, 6135, 5181, 12542, 10567, 16747, 10012, 4948, 5820, 12719, 10931, 9292, 10944, 8559, 5811, 16007, 5241, 17614, 9708, 4001, 3981, 15771, 3371, 6086, 3022, 12080, 8472, 7240, 5959, 5219, 6844, 3692, 5598, 4265, 6875, 9462, 15572, 3478, 4531, 4302, 8704, 6227, 10792, 4029, 7478, 7282, 12561, 6705, 6907, 7249, 6556, 7540, 11011, 9248, 5532, 10054, 9378, 17613, 8753, 5292, 13269, 11999, 14181, 8131, 14303, 8611, 9163, 4016, 10249, 9164, 15217, 9039, 4893, 6245, 7075, 7440, 8314, 12330, 7876, 6766, 8009, 8466, 8057, 8234, 12095, 9393, 8044, 10634, 13527, 7149, 14231, 19147, 10737, 11003, 6426, 6523, 5304, 5471, 6733, 14166, 10532, 8148, 6476, 6130, 7619, 10845, 12860, 9676, 10325, 8232, 7677, 12751, 8500, 10919, 10089, 7140, 7366, 7846, 6802, 12311, 9717, 10476, 5234, 7284, 7837, 13132, 10071, 14832, 14483, 4909, 6096, 6657, 8150, 10124, 4299, 6920, 6385, 3322, 12425, 10923, 9219, 7949, 11597, 9084, 5388, 8752, 11074, 5738, 3147, 7674, 7317, 8762, 9225, 7120, 12551, 7227, 9004, 7042, 8855, 6135, 5716, 11899, 7287, 6281, 9636, 2051, 11054, 15930, 10782, 8443, 3684, 9203, 12339, 13637, 14644, 9025, 8712, 8086, 8237, 5340, 10172, 8519, 5121, 4815, 5052, 5429, 7248, 7858, 7070, 4348, 2885, 6587, 11638, 6375, 8664, 8640, 3259, 7800, 5537, 8160, 6950, 10276, 7391, 10162, 8309, 6671, 5809, 7343, 5856, 7533, 5745, 6607, 6647, 11276, 9261, 3977, 7627, 9304, 6859, 5565, 5581, 9754, 8280, 25279, 23805, 19413, 18300, 13290, 7470, 5646, 9042, 5565, 3463, 6285, 10246, 10785, 4545, 12911, 5731, 5964, 6384, 3747, 5814, 3847, 10162, 6782, 3392, 4275, 4568, 5050, 6868, 6374, 11958, 7950, 11788, 12493, 6910, 11937, 12843, 14217, 7817, 8450, 5602, 6678, 9121, 6354, 6331, 5608, 7568, 6762, 5785, 6306, 12359, 6058, 4233, 9299, 8360, 22375, 22007, 12007, 14071, 14729, 12121, 7457, 7120, 9568, 7102, 11894, 6496, 4393, 10485, 5115, 6867, 5305, 4652, 6435, 5922, 9289, 6334, 6444, 4808, 7578, 7012, 7247, 6052, 5697, 6380, 5563, 8151, 2865, 13117, 6582, 3028, 3154, 15622, 6812, 10044, 8391, 11719, 4568, 9384, 12197, 4049, 5832, 5809, 3546, 12884, 9229, 9280, 9912, 5562, 5902, 10486, 8460, 9584, 11280, 13611, 3652, 4802, 5324, 7577, 11318, 4784, 3533, 9261, 5115, 7710, 4628, 3927, 4750, 3291, 15395, 10363, 3843, 3763, 14632, 13045, 2564, 18416, 6372, 2692, 2767, 5676, 6113, 5114, 6249, 4142, 4995, 6426, 7834, 7758, 7927, 13699, 7467, 7110, 3527, 4545, 7966, 7910, 15983, 4806, 2558, 5589, 3285, 9340, 6375, 10033, 4581, 4720, 3262, 7907, 5608, 8658, 4030, 2858, 4900, 5222, 4521, 6967, 4623, 5019, 3667, 3374, 2495, 11966, 3491, 10119, 4501, 2745, 7081, 5428, 9131, 6496, 5047, 7781, 9488, 4146, 5485, 6615, 9036, 8452, 5785, 4613, 11058, 5161, 6917, 6141, 11215, 6663, 12344, 4980, 3012, 5691, 4977, 5363, 3965, 5344, 8358, 11288, 4963, 6011, 9185, 5288, 6432, 6788, 10580, 4978, 13153, 8263, 8645, 16388, 10021, 10419, 11328, 13667, 6960, 7315, 4446, 8013, 5242, 4878, 9649, 14827, 11774, 3375, 6819, 6332, 6109, 4363, 7380, 7272, 4592, 5742, 7114, 5881, 5052, 7173, 18975, 11708, 14729, 16777, 5545, 4565, 5323, 3109, 4810, 4615, 4070, 5721, 6098, 4323, 6268, 10333, 6833, 6788, 8005, 6562, 8952, 5532, 7742, 10180, 7627, 3874, 10992, 17165, 8004, 4887, 12056, 3544, 11958, 8379, 5808, 10133, 6136, 7844, 5077, 5230, 14430, 11948, 8531, 8427, 8438, 6027, 3919, 5983, 5975, 9220, 8753, 9130, 9260, 7686, 6991, 11982, 6115, 4474, 6931, 3754, 15906, 6449, 10573, 4812, 12402, 12912, 13438, 7412, 10019, 27414, 36071, 15714, 6107, 5179, 10948, 19723, 7547, 3786, 7845, 3327, 4447, 4860, 6149, 8538, 6257, 10448, 4443, 11942, 1730, 14134, 4666, 5071, 6173, 11704, 4607, 6247, 6375, 4182, 16180, 7471, 12555, 5760, 9328, 5713, 14030, 6049, 5951, 6069, 12854, 4836, 14217, 5776, 2423, 4852, 2799, 4480, 12941, 4175, 4829, 5377, 4460, 6602, 4913, 9493, 7650, 8681, 11133, 2283, 6924, 8551, 5273, 5646, 8666, 12462, 8533, 6941, 5393, 7105, 10014, 14616, 17650, 12114, 9742, 9153, 6854, 7490, 6955, 5643, 8014, 4923, 4150, 8185, 7808, 2864, 4063, 9195, 5844, 8335, 21253, 4786, 6326, 9011, 7229, 7458, 8428, 6157, 7127, 13757, 5883, 9739, 2431, 5295, 9040, 6559, 2450, 7642, 7836, 5899, 3269, 8312, 8302, 5830, 10216, 3932, 7072, 8713, 6760, 11349, 9819, 11162, 7539, 7225, 7771, 6111, 11532, 11617, 2987, 6177, 7625, 11542, 19291, 17431, 4074, 908, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 15032, 5804, 9979, 6299, 10188, 10308, 11610, 5317, 2313, 5661, 12523, 6381, 6636, 3126, 11301, 7114, 6989, 3523, 13559, 6180, 5321, 11520, 7981, 5041, 6151, 9717, 4562, 3423, 3005, 2288, 14729, 8357, 4324, 3475, 8688, 6964, 3506, 8606, 10506, 10610, 13750, 6635, 2814, 9509, 8162, 21713, 14372, 13596, 3862, 3034, 11850, 2679, 7685, 4327, 3698, 16097, 3939, 13327, 8197, 5941, 8878, 5414, 3772, 10886, 10295, 7183, 8527, 9160, 8989, 11296, 8703, 14173, 10407, 12266, 10083, 6949, 8663, 4858, 4465, 10319, 10037, 6337, 4113, 7453, 15553, 6481, 6680, 13958, 14490, 15722, 9856, 2594, 7494, 10566, 6600, 8214, 9240, 4640, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 6913, 2634, 10301, 3434, 2866, 11327, 18068, 2480, 8688, 3033, 7554, 16120, 8445, 15145, 13148, 17328, 4215, 1611, 5837, 8646, 3793, 5408, 4350, 4839, 7490, 4302, 2667, 11191, 7562, 5340, 7524, 3714, 10671, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5026, 6971, 5522, 5254, 6392, 7085, 8821, 2698, 5029, 4933, 8290, 8454, 6608, 18942, 11899, 9875, 10741, 6886, 6269, 5691, 5496, 7663, 2710, 5325, 6300, 4014, 5459, 4413, 14453, 5396, 8647, 10913, 8562, 9222, 8842, 5925, 6442, 9348, 8394, 12344, 7911, 6263, 9085, 5120, 5224, 8204, 10360, 16765, 10527, 16828, 10230, 10203, 10691, 10258, 10331, 13555, 13111, 10148, 11006, 10956, 11183, 10308, 10270, 10791, 10391, 10193, 10786, 10008, 10064, 10724, 12560, 13188, 10057, 10831, 10314, 10811, 10226, 10055, 10705, 10272, 10617, 10153, 10299, 10867, 10796, 11196, 10669, 10452, 10594, 16675, 11161, 12918, 10315, 11860, 10334, 11126, 10279, 11065, 10523, 11553, 10425, 10089, 10618, 10567, 10888, 10463, 10845, 12171, 10107, 10101, 10221, 10199, 10716, 11570, 10054, 10250, 14385, 13306, 13232, 10037, 12036, 10288, 10075, 12174, 11660, 10642, 10393, 11421, 11523, 10506, 11644, 10001, 13336, 11975, 11096, 10006, 10457, 10676, 10075, 10546, 12568, 10542, 11138, 10284, 10095, 10362, 15955, 11461, 10592, 10680, 10809, 10034, 10633, 10636, 10396, 13052, 10313, 10692, 10063, 11012, 10033, 10299, 12011, 10615, 10964, 11159, 11485, 10466, 10619, 13599, 10579, 10172, 10322, 10400, 12236, 10437, 10639, 14110, 12101, 10022, 10027, 11260, 10449, 11072, 8220, 5987, 5723, 5117, 9531, 14491, 7639, 4393, 6999, 10099, 13892, 6532, 20215, 10036, 4608, 12357, 6813, 8030, 3047, 12059, 2133, 2968, 6151, 7106, 8160, 5799, 4577, 5183, 6791, 5828, 11233, 6063, 2919, 5762, 8229, 4725, 2325, 3093, 5859, 3621, 9186, 6197, 6892, 10081, 11918, 9817, 18567, 17743, 9443, 15476, 2902, 5928, 949, 965, 4258, 6479, 6078, 11259, 6542, 10124, 11722, 12180, 11601, 10583, 12855, 10491, 10055, 2260, 11390, 4276, 10730, 11807, 10005, 11876, 7303, 10592, 10014, 13469, 10006, 6392, 7756, 10055, 12014, 9041, 10050, 10305, 10043, 8992, 3127, 10034, 11065, 8661, 10052, 10411, 10398, 10030, 10031, 5640, 10152, 10064, 6926, 10765, 8092, 4227, 6689, 4746, 10028, 6016, 7649, 7398, 3973, 8094, 4747, 5897, 6190, 6191, 9446, 10664, 5878, 8838, 6426, 5119, 4190, 10224, 6228, 5417, 3689, 4328, 6491, 10313, 8257, 10951, 11751, 10451, 4834, 6437, 5138, 2997, 10394, 5205, 5608, 6524, 5580, 5681, 5502, 5798, 6201, 10640, 7014, 7410, 6188, 6695, 6466, 3045, 4134, 5067, 12088, 4490, 10136, 5688, 5570, 5013, 4643, 6619, 3746, 3150, 4171, 7306, 3830, 4576, 4080, 3105, 6727, 7088, 4622, 7145, 4020, 5865, 8072, 5305, 8522, 3278, 2880, 5166, 7625, 6200, 7791, 4122, 4738, 4600, 7793, 5365, 6708, 7521, 3620, 2432, 7622, 4392, 6389, 7614, 7114, 7023, 10264, 5074, 7150, 5273, 7953, 8147, 5434, 7152, 8076, 4501, 5962, 5900, 7669, 20882, 8289, 11909, 10057, 5622, 4190, 5771, 4865, 4177, 6767, 7070, 5347, 7494, 7442, 10303, 10170, 10131, 5885, 10101, 5600, 5372, 11234, 10338, 10122, ]
# 16.09.2022
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —à–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ ACTIVITY_STEPS_ALL_TIME.csv —Ñ–∞–π–ª.
STEPS = steps + [10204, 10039, 8469, 7859, 10725, 10170, 10444, 10092, 10788, 10079, 15934, 15113, 11072, 10041, 10096,
                 10124, 13242, 11181, 11362, 10131, 10398, 10218, 10256, 4100, 10164, 10279, 10275, 12049, 10468,
                 10124, 10481, 15017, 12729, 13356, 10535, 10164, 10164, 10070, 10233, 10118, 10059, 10228, 10030,
                 12845, 10090, 10113, 5700, 6635, 5772, 6973, 5684, 8137, 6071, 6167, 5327,  ]

steps_sum = sum(STEPS)  # –û–±—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω—ã—Ö —à–∞–≥–æ–≤
steps_average = steps_sum / len(STEPS)        # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω—ã—Ö —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å
steps_average_last_30_days = sum(STEPS[-30:]) // 30     # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
steps_average_last_90_days = sum(STEPS[-90:]) // 90     # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
steps_average_last_180_days = sum(STEPS[-180:]) // 180     # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 180 –¥–Ω–µ–π
steps_average_last_360_days = sum(STEPS[-360:]) // 360     # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 360 –¥–Ω–µ–π
steps_average_last_30_days_change = round((sum(STEPS[-30:]) / 30) - (sum(STEPS[-30:-1]) / 29), 1)       # –ù–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —à–∞–≥–æ–≤ +-, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è - 30 –¥–Ω–µ–π.
steps_average_last_90_days_change = round((sum(STEPS[-90:]) / 90) - (sum(STEPS[-90:-1]) / 89), 1)       # –ù–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —à–∞–≥–æ–≤ +-, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è - 90 –¥–Ω–µ–π.
steps_average_last_180_days_change = round((sum(STEPS[-180:]) / 180) - (sum(STEPS[-180:-1]) / 179), 1)  # –ù–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —à–∞–≥–æ–≤ +-, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è - 180 –¥–Ω–µ–π.
steps_average_last_360_days_change = round((sum(STEPS[-360:]) / 360) - (sum(STEPS[-360:-1]) / 359), 1)  # –ù–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —à–∞–≥–æ–≤ +-, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è - 360 –¥–Ω–µ–π.

steps_max = max(STEPS)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ–π–¥–µ–Ω—ã—Ö —à–∞–≥–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è
steps_min = min(STEPS)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ–π–¥–µ–Ω—ã—Ö —à–∞–≥–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è

STEP_ONE_DISTANCE = 0.0007 # –î–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –≤ –∫–º
distance_km_sum = round(steps_sum * STEP_ONE_DISTANCE, 1)     # –ü—Ä–æ–π–¥–µ–Ω–∞—è –¥–∏—Å—Ç–∞–Ω–∫–∏—è –≤ –∫–º
distance_km_average = round(distance_km_sum / len(STEPS), 1)  # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–π–¥–µ–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –≤ –∫–º
distance_km_average_diff = (steps_average - (sum(STEPS[:-1]) / (len(STEPS) - 1))) * STEP_ONE_DISTANCE   # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤ –∫–º
distance_km_average_diff_in_m = round(distance_km_average_diff * 1000, 2)   # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π –¥–∏—Å—Ç–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤ –º–µ—Ç—Ä–∞ (–º).
distance_day_km = round(STEPS[-1] * STEP_ONE_DISTANCE, 2)     # –ü—Ä–æ–π–¥–µ–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
percentage_difference = (STEPS[-1] - steps_average) / steps_average * 100   # –†–∞–∑–Ω–∏—Ü–∞ –≤ % –º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã—Ö –≤—Ä–µ—á–∞, –∏ –æ–±—â–∏–º —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤
percentage_difference_round = round(percentage_difference, 2)


# –í—ã—á–∏—Å–ª—è–µ—Ç % –Ω–∞ —Å–∫–æ–ª—å–∫–æ –±–æ–ª—å—à–µ —Ö–æ–∂—É —à–∞–≥–æ–≤, —á–µ–º 10k. –ü–æ–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–µ –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ —Å—á–∏—Ç–∞—é—Ç—Å—è %.
percentage_difference_10k = round(steps_average / 10000 * 10, 2)   # –†–∞–∑–Ω–∏—Ü–∞ –≤ % –º–µ–∂–¥—É 10.000 —à–∞–≥–∞–º–∏ –∏ —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª-–≤–æ–º –ø—Ä–æ–π–¥–µ–Ω—ã—Ö —à–∞–≥–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è challenge, –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–µ–ª–æ—á–µ–∫
challenge_last_day = None     # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤
challenge_average = None     # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –≤—Å–µ –¥–Ω–∏ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤
challenge_row = None     # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—Ç—Ä–µ–ª–æ—á–µ–∫ –≤–Ω–∏–∑ –∏ –≤–≤–µ—Ä—Ö –≤ —é–Ω–∏–∫–æ–¥–µ

# –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∑–∞–ø–∞—Å–∞ —à–∞–≥–æ–≤ –¥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ 10–∫
stock_steps_to_10k_per_day = (steps_average - 10000) * len(STEPS)
#stock_days_steps_to_10k_per_day = (stock_steps_to_10k_per_day / 10000) # –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –≤ –∑–∞–ø–∞—Å–µ.

stock_steps_to_10k_per_day_color = None
if stock_steps_to_10k_per_day >= 0:
    stock_steps_to_10k_per_day_color = Fore.GREEN
elif stock_steps_to_10k_per_day < 0:
    stock_steps_to_10k_per_day_color = Fore.RED

# –¶–∏–∫–ª –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π, –≥–¥–µ —à–∞–≥–æ–≤ –±–æ–ª–µ–µ 10–∫ –∑–∞ –¥–µ–Ω—å.
steps_more_10k = 0

for i in STEPS:
    if i >= 10000:
        steps_more_10k += 1

# –°—á–∏—Ç–∞–µ—Ç % –¥–Ω–µ–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–Ω—è
percent_steps_more_10k = steps_more_10k / len(STEPS) * 100


# –¶–∏–∫–ª –¥–ª—è –ø–æ—Å—á—ë—Ç–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ–ª–µ–Ω–¥–∂.
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–Ω—è.
steps_flipped = STEPS[::-1] # –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –ø–æ –¥–Ω—è–º.
challenge_last_days_go_on = 0 # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–ª–µ–Ω–¥–∂–∞.

while steps_flipped [0] >= 10000:
    challenge_last_days_go_on += 1 # –ö–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤.
    del steps_flipped[0]


# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–π + –∏–ª–∏ - –≤ –∫–æ–ª-–≤–µ —Å—Ä–µ–¥–Ω–µ–º –∑–Ω–∞—á–µ–Ω–∏–∏ —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å. –ò –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ä–µ–¥–Ω–µ–º –º–µ–¥–∏–∞–Ω–Ω—ã–º.
steps_average_day_changes = round(steps_average - (sum(STEPS[:-1]) / (len(STEPS) - 1)), 1)
steps_average_day_changes_sing = None

if steps_average_day_changes > 0:
    steps_average_day_changes_color = Fore.LIGHTGREEN_EX
    steps_average_day_changes_sing = '+'
elif steps_average_day_changes < 0:
    steps_average_day_changes_color = Fore.RED
    steps_average_day_changes_sing = ''
elif steps_average_day_changes == 0:
    steps_average_day_changes_color = Fore.CYAN
    steps_average_day_changes_sing = ''

# –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ –º–µ–¥–∏–∞–Ω–Ω–æ–µ +- –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å.
steps_median_day_changes = statistics.median(STEPS) - statistics.median(STEPS[:-1])
steps_median_day_changes_sing = None

if steps_median_day_changes > 0:
    steps_median_day_changes_color = Fore.LIGHTGREEN_EX
    steps_median_day_changes_sing = '+'
elif steps_median_day_changes < 0:
    steps_median_day_changes_color = Fore.RED
    steps_median_day_changes_sing = ''
elif steps_median_day_changes == 0:
    steps_median_day_changes_color = Fore.CYAN
    steps_median_day_changes_sing = ''

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏ –∑–Ω–∞–∫–∞ "+-" –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –∑–∞ 30/90/180/360 –¥–Ω–µ–π.
steps_average_last_30_days_change_color = None
steps_average_last_30_days_change_sign = None
steps_average_last_90_days_change_color = None
steps_average_last_90_days_change_sign = None
steps_average_last_180_days_change_color = None
steps_average_last_180_days_change_sign = None
steps_average_last_360_days_change_color = None
steps_average_last_360_days_change_sign = None

if steps_average_last_30_days_change > 0:
    steps_average_last_30_days_change_color = Fore.LIGHTGREEN_EX
    steps_average_last_30_days_change_sign = '+'
elif steps_average_last_30_days_change < 0:
    steps_average_last_30_days_change_color = Fore.RED
    steps_average_last_30_days_change_sign = ''
elif steps_average_last_30_days_change == 0:
    steps_average_last_30_days_change_color = Fore.CYAN
    steps_average_last_30_days_change_sign = ''

if steps_average_last_90_days_change > 0:
    steps_average_last_90_days_change_color = Fore.LIGHTGREEN_EX
    steps_average_last_90_days_change_sign = '+'
elif steps_average_last_90_days_change < 0:
    steps_average_last_90_days_change_color = Fore.RED
    steps_average_last_90_days_change_sign = ''
elif steps_average_last_90_days_change == 0:
    steps_average_last_90_days_change_color = Fore.CYAN
    steps_average_last_90_days_change_sign = ''

if steps_average_last_180_days_change > 0:
    steps_average_last_180_days_change_color = Fore.LIGHTGREEN_EX
    steps_average_last_180_days_change_sign = '+'
elif steps_average_last_180_days_change < 0:
    steps_average_last_180_days_change_color = Fore.RED
    steps_average_last_180_days_change_sign = ''
elif steps_average_last_180_days_change == 0:
    steps_average_last_180_days_change_color = Fore.CYAN
    steps_average_last_180_days_change_sign = ''

if steps_average_last_360_days_change > 0:
    steps_average_last_360_days_change_color = Fore.LIGHTGREEN_EX
    steps_average_last_360_days_change_sign = '+'
elif steps_average_last_360_days_change < 0:
    steps_average_last_360_days_change_color = Fore.RED
    steps_average_last_360_days_change_sign = ''
elif steps_average_last_360_days_change == 0:
    steps_average_last_360_days_change_color = Fore.CYAN
    steps_average_last_360_days_change_sign = ''

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏ –∑–Ω–∞–∫–∞ "+-" –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–º.
distance_km_average_diff_in_m_color = None
distance_km_average_diff_in_m_sign = None

if distance_km_average_diff_in_m > 0:
    distance_km_average_diff_in_m_color = Fore.LIGHTGREEN_EX
    distance_km_average_diff_in_m_sign = '+'
elif distance_km_average_diff_in_m < 0:
    distance_km_average_diff_in_m_color = Fore.RED
    distance_km_average_diff_in_m_sign = ''


##### !!!! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤.
# –•–æ—á—É –¥–æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –±—ã –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å –±–æ–ª–µ–µ —á–µ–º –∑–∞ 1 –¥–µ–Ω—å.

days_challenge_complete_row = []
def challenge_days_counter():
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π, –≤ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤.
    steps_days_copy = STEPS.copy()
    counter_more_10000 = 0      # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤

    for i in steps_days_copy:
        if i >= 10000:
            counter_more_10000 += 1
        if i < 10000:
            if counter_more_10000 > 0:
                days_challenge_complete_row.append(counter_more_10000)
                counter_more_10000 = 0

challenge_days_counter()
# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
days_challenge_complete_row_sorted = sorted(days_challenge_complete_row, reverse=True)


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏–∑ –æ–±—â–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –∫–º:
travel_city = None      # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
travel_next_city_distance_km = None     # –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∫–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
travel_next_city = None     # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
travel_predict_next_city_days = None    # –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∏–¥—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞. –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å
travel_predict_word_ending_days = None      # –£—Ç–æ—á–Ω–µ–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–Ω—å/–¥–Ω—è/–¥–Ω–µ–π, –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π travel_predict_next_city_days
travel_steps_next_city = None      # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è kcal. + —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è –∫–í—Ç –∏ –ª–∏—Ç—Ä–æ–≤ –±–µ–Ω–∑–∏–Ω–∞ (1 kcal = 35 —à–∞–≥–æ–≤), (1–ª –±–µ–Ω–∑–∏–Ω–∞ = 10500 –∫–∫–∞–ª)
STEPS_FOR_ONE_KCAL = 35    # –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –Ω–∞ 1 kcal
kcal_sum = int(steps_sum / STEPS_FOR_ONE_KCAL)    # –û–±—â–µ–µ –∫–æ–ª-–≤–æ –∑–∞—Ç—Ä–∞—á–µ–Ω—ã—Ö kcal, –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
kcal_last_day = STEPS[-1] // STEPS_FOR_ONE_KCAL    # –ö–æ–ª-–≤–æ kcal –ø–æ—Ç—Ä–∞—á–µ–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
KCAL_TO_KWT = 0.859845    # –ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞, —Å–∫–æ–ª—å–∫–æ –∫–∫–∞–ª –Ω–∞ –æ–¥–∏–Ω –í–∞—Ç—Ç. 1 –∫–∫–∞–ª = 1,163 –í—Ç
kwt_sum = round((kcal_sum * KCAL_TO_KWT) / 1000, 2)    # –†–∞—Å—á—ë—Ç, —Å—Ç–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ –∫–í—Ç, –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
petrol_economy_liter = round(kcal_sum / 10500, 1)   # –†–∞—Å—á—ë—Ç, —Å–∫–æ–ª—å–∫–æ –±–µ–Ω–∑–∏–Ω–∞ —Å—ä–µ–∫–æ–Ω–æ–º–ª–µ–Ω–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è. –í 1–ª –±–µ–Ω–∑–∏–Ω–∞ - 10500 –∫–∫–∞–ª
BIG_MAC_KCAL = 257
big_mac_used = kcal_sum // BIG_MAC_KCAL
kcal_to_fat = round((kcal_sum / 9) / 1000, 2) # –†–∞—Å—á—ë—Ç –ø–æ—Ç—Ä–µ—á–µ–Ω–Ω—ã—Ö –∫–≥ –∂–∏—Ä–∞


# –ü–æ–¥—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —à–∞–≥–æ–≤ –ø–æ –¥–Ω—è–º + —Å—Ä–µ–¥–Ω–Ω—è –º–µ–¥–∏–∞–Ω–Ω–∞—è.
days_average_steps = []
days_median_steps = []

def days_average_median():
    # –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –º–µ–¥–∏–∞–Ω–Ω–æ–π
    days = []
    for day in STEPS:
        days.append(int(day))
        days_average_steps.append(int(sum(days) / len(days)))
        days_median_steps.append(int(statistics.median(days)))

days_average_median()


# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ 30, 90, 180, 360 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π.
days_average_30_graph = []       # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π.
days_average_180_graph = []      # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 180 –¥–Ω–µ–π.
days_average_360_graph = []      # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 360 –¥–Ω–µ–π.

def days_average_30():
    # –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π.
    days_30_temp = []  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    for value in STEPS:
        days_30_temp.append(value)
        if len(days_30_temp) > 30:
            days_30_temp.remove(days_30_temp[0])
        average_30_temp = sum(days_30_temp) // len(days_30_temp)
        days_average_30_graph.append(average_30_temp)

days_average_30()

def days_average_180():
    # –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 180 –¥–Ω–µ–π.
    days_180_temp = []  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    for value in STEPS:
        days_180_temp.append(value)
        if len(days_180_temp) > 180:
            days_180_temp.remove(days_180_temp[0])
        average_180_temp = sum(days_180_temp) // len(days_180_temp)
        days_average_180_graph.append(average_180_temp)

days_average_180()

def days_average_360():
    # –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 180 –¥–Ω–µ–π.
    days_360_temp = []  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    for value in STEPS:
        days_360_temp.append(value)
        if len(days_360_temp) > 360:
            days_360_temp.remove(days_360_temp[0])
        average_360_temp = sum(days_360_temp) // len(days_360_temp)
        days_average_360_graph.append(average_360_temp)

days_average_360()

# –°—Ä–µ–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏.
# –ù–∞—á–∞–ª–æ Challenge - 26.08.2021 (–ß—Ç). # –í–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á—ë—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è. –†–∞—Å—á—ë—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ß–µ—Ç–≤–µ—Ä–≥–∞.

day_monday = STEPS[slice(4, None, 7)]
day_monday_average = sum(day_monday) // len(day_monday)
day_monday_median = statistics.median(STEPS[slice(4, None, 7)])
day_tuesday = STEPS[slice(5, None, 7)]
day_tuesday_average = sum(day_tuesday) // len(day_tuesday)
day_tuesday_median = statistics.median(STEPS[slice(5, None, 7)])
day_wednesday = STEPS[slice(6, None, 7)]
day_wednesday_average = sum(day_wednesday) // len(day_wednesday)
day_wednesday_median = statistics.median(STEPS[slice(6, None, 7)])
day_thursday = STEPS[slice(0, None, 7)]
day_thursday_average = sum(day_thursday) // len(day_thursday)
day_thursday_median = statistics.median(STEPS[slice(0, None, 7)])
day_friday = STEPS[slice(1, None, 7)]
day_friday_average = sum(day_friday) // len(day_friday)
day_friday_median = statistics.median(STEPS[slice(1, None, 7)])
day_saturday = STEPS[slice(2, None, 7)]
day_saturday_average = sum(day_saturday) // len(day_saturday)
day_saturday_median = statistics.median(STEPS[slice(2, None, 7)])
day_sunday = STEPS[slice(3, None, 7)]
day_sunday_average = sum(day_sunday) // len(day_sunday)
day_sunday_median = statistics.median(STEPS[slice(3, None, 7)])

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å + –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ Min –∏ Max —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω, —Å—Ä–µ–¥–Ω—è—è –º–µ–¥–∏–∞–Ω–Ω–∞—è .
# –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º.
avarage_steps_days_of_week = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:": {
        "average_day": (day_monday_average),
        "median_day": int(day_monday_median),
        "min_day": min(day_monday),
        "max_day": max(day_monday),
        },
    "–≤—Ç–æ—Ä–Ω–∏–∫:    ": {
        "average_day": (day_tuesday_average),
        "median_day": int(day_tuesday_median),
        "min_day": min(day_tuesday),
        "max_day": max(day_tuesday),
        },
    "—Å—Ä–µ–¥–∞:      ": {
        "average_day": (day_wednesday_average),
        "median_day": int(day_wednesday_median),
        "min_day": min(day_wednesday),
        "max_day": max(day_wednesday),
        },
    "—á–µ—Ç–≤–µ—Ä–≥:    ": {
        "average_day": (day_thursday_average),
        "median_day": int(day_thursday_median),
        "min_day": min(day_thursday),
        "max_day": max(day_thursday),
        },
    "–ø—è—Ç–Ω–∏—Ü–∞:    ": {
        "average_day": (day_friday_average),
        "median_day": int(day_friday_median),
        "min_day": min(day_friday),
        "max_day": max(day_friday),
        },
    "—Å—É–±–±–æ—Ç–∞:    ": {
        "average_day": (day_saturday_average),
        "median_day": int(day_saturday_median),
        "min_day": min(day_saturday),
        "max_day": max(day_saturday),
        },
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ:": {
        "average_day": (day_sunday_average),
        "median_day": int(day_sunday_median),
        "min_day": min(day_sunday),
        "max_day": max(day_sunday),
        }
    }


# –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Å –¥–Ω—è.
hour_stat_steps = {
    '00:00-00:59': [], '01:00-01:59': [], '02:00-02:59': [], '03:00-03:59': [], '04:00-04:59': [], '05:00-05:59': [],
    '06:00-06:59': [], '07:00-07:59': [], '08:00-08:59': [], '09:00-09:59': [], '10:00-10:59': [], '11:00-11:59': [],
    '12:00-12:59': [], '13:00-13:59': [], '14:00-14:59': [], '15:00-15:59': [], '16:00-16:59': [], '17:00-17:59': [],
    '18:00-18:59': [], '19:00-19:59': [], '20:00-20:59': [], '21:00-21:59': [], '22:00-22:59': [], '23:00-23:59': [],
}

if is_setting_hour_statistics == True:     # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª/–≤—ã–∫–ª —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —á–∞—Å–∞–º

    def hours_stat_steps():
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —à–∞–≥–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Å –¥–Ω—è.
        with open("ACTIVITY_MINUTE_ALL_TIME.csv") as file_minute_all_time_csv:
            minute_all_time = csv.DictReader(file_minute_all_time_csv, delimiter=";")

            for row in minute_all_time:
                # –ó–∞–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º
                for i, hour in enumerate(hour_stat_steps, 0):
                    if row['time'][:-3] == f'{i:02}':
                        hour_stat_steps[hour].append(int(row['steps']))

    hours_stat_steps()      # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å—á—ë—Ç–∞ –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Å –¥–Ω—è.

hour_stat_steps_sum = sum(sum(hour_stat_steps.values(), []))    # –ü–æ–¥—Å—á—ë—Ç —Å—É–º–º—ã —à–∞–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ *.csv


# –ü–æ–¥—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤ –∑–∞ –º–µ—Å—è—Ü.
month_stat_steps = {
    '—è–Ω–≤–∞—Ä—å': [], '—Ñ–µ–≤—Ä–∞–ª—å': [], '–º–∞—Ä—Ç': [], '–∞–ø—Ä–µ–ª—å': [], '–º–∞–π': [], '–∏—é–Ω—å': [],
    '–∏—é–ª—å': [], '–∞–≤–≥—É—Å—Ç': [], '—Å–µ–Ω—Ç—è–±—Ä—å': [], '–æ–∫—Ç—è–±—Ä—å': [], '–Ω–æ—è–±—Ä—å': [], '–¥–µ–∫–∞–±—Ä—å': [],
    }

year_stat_steps = {
    '2018': [], '2019': [], '2020': [], '2021': [], '2022': []
    }

def mounth_year_stat_steps():
    # –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ –±—ã –∑–∞–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–≥–∞–º –ø–æ –º–µ—Å—è—Ü–∞–º, –∏ –ø–æ –≥–æ–¥–∞–º –∏–∑ *.csv
    with open("ACTIVITY_STEPS_ALL_TIME.csv") as file_steps_all_time_csv:
        file_reader_steps = csv.DictReader(file_steps_all_time_csv, delimiter=";")
        file_reader_steps_copy = list(file_reader_steps)

        for row in file_reader_steps_copy:
            # –ó–∞–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
            for i, month in enumerate(month_stat_steps, 1):
                if row['date'][5:-3] == f'{i:02}':
                    month_stat_steps[month].append(int(row['steps']))

        for row in file_reader_steps_copy:
            # –ó–∞–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥–∞–º 2018-2022 –≥–æ–¥–∞.
            for i, year in enumerate(year_stat_steps, 2018):
                if row['date'][:-6] == f'{i}':
                    year_stat_steps[year].append(int(row['steps']))


mounth_year_stat_steps()
month_stat_steps_sum = sum(sum(month_stat_steps.values(), []))      # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ % –≤ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º.
year_stat_steps_sum = sum(sum(year_stat_steps.values(), []))        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ % –≤ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ø–æ –≥–æ–¥–∞–º.

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤.
if STEPS[-1] >= 10000:
    challenge_last_day = Fore.GREEN + "–±–æ–ª—å—à–µ" + Style.RESET_ALL
else:
    challenge_last_day = Fore.RED + "–º–µ–Ω—å—à–µ" + Style.RESET_ALL

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –≤—Å–µ –¥–Ω–∏ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤.
if STEPS[-1] >= steps_average:
    challenge_average = Fore.CYAN + "+"
else:
    challenge_average = Fore.RED

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤.
if STEPS[-1] >= steps_average:
    challenge_row = "ü†ï"
else:
    challenge_row = "ü†ó"

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑ –æ–±—â–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ç–æ—è–Ω–∏—è –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π —è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—à–µ–ª. –°—Ç–∞—Ä—Ç –∏–∑ –ñ–∏—Ç–æ–º–∏—Ä–∞.
# –ó–∞—Ç–µ–º –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞, –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –≤ –¥–Ω—è—Ö.

### –ù–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è:
# –ñ–∏—Ç–æ–º–∏—Ä => –õ—å–≤–æ–≤ => –ö—Ä–∞–∫–æ–≤ => Dolny Kubin, –ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞, –ì—Ä–∞—Ü (–ê–≤—Å—Ç—Ä–∏—è), Njivice, –í–µ–Ω–µ—Ü–∏—è, –í–æ–∫–≥—É—Ä –ò—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ –ø–æ–ª—É–æ—Å—Ç—Ä–æ–≤–∞, –ù–∏—Ü—Ü–∞, –ë–∞—Ä—Å–µ–ª–æ–Ω–∞, –¢–∞—Ä–∏—Ñ–∞ (7391 –∫–º)
# https://www.google.com.ua/maps/dir/%D0%96%D0%B8%D1%82%D0%BE%D0%BC%D0%B8%D1%80/%D0%94%D0%BE%D0%BB%D0%BD%D1%8B+%D0%9A%D1%83%D0%B1%D0%B8%D0%BD/%D0%91%D1%80%D0%B0%D1%82%D0%B8%D1%81%D0%BB%D0%B0%D0%B2%D0%B0/%D0%93%D1%80%D0%B0%D1%86,+%D0%90%D0%B2%D1%81%D1%82%D1%80%D0%B8%D1%8F/%D0%9D%D1%96%D0%B2%D0%B8%D1%86%D0%B5,+%D0%A5%D0%BE%D1%80%D0%B2%D0%B0%D1%82%D0%B8%D1%8F/%D0%92%D0%B5%D0%BD%D0%B5%D1%86%D0%B8%D1%8F,+%D0%98%D1%82%D0%B0%D0%BB%D0%B8%D1%8F/%D0%A2%D0%B0%D1%80%D0%B8%D1%84%D0%B0,+%D0%98%D1%81%D0%BF%D0%B0%D0%BD%D0%B8%D1%8F/@40.4779137,4.2307939,5.26z/data=!4m79!4m78!1m10!1m1!1s0x472c64a32bfa355d:0xf14ad2a3d9b9e229!2m2!1d28.6586669!2d50.25465!3m4!1m2!1d20.9176217!2d50.0551705!3s0x473d83c6649caa7b:0x1fcee554f38dc479!1m5!1m1!1s0x4715b1a430a9c16f:0x400f7d1c69708c0!2m2!1d19.2968746!2d49.212679!1m5!1m1!1s0x476c89360aca6197:0x631f9b82fd884368!2m2!1d17.1077478!2d48.1485965!1m5!1m1!1s0x476e3587173065bb:0xfe8e8ad1d2dfdd9b!2m2!1d15.439504!2d47.070714!1m5!1m1!1s0x4763643854f2c763:0xd1a2ff912e5dc48b!2m2!1d14.5448533!2d45.1644434!1m35!1m1!1s0x477eb1daf1d63d89:0x7ba3c6f0bd92102f!2m2!1d12.3155151!2d45.4408474!3m4!1m2!1d17.0004967!2d40.5984243!3s0x13470bdbcec1ba9f:0x830e97bd1d6537c7!3m4!1m2!1d17.1308356!2d39.0669494!3s0x1340485eaae7e579:0x8be496935ac90db0!3m4!1m2!1d16.0616966!2d37.9252918!3s0x1314ec78f174adb5:0x2bc4fbc9ff540276!3m4!1m2!1d14.9988326!2d36.8375669!3s0x1311886fa85d94d7:0xe0f6df126a3ab7e7!3m4!1m2!1d13.714939!2d37.1973034!3s0x131087e9cc1c9379:0x9d698167f8fed664!3m4!1m2!1d12.4594496!2d37.7772536!3s0x131bc2605a54de95:0x1e3064240bc37aa1!1m5!1m1!1s0xd0c8ef7c23f1c63:0x2ce0f2832aa48963!2m2!1d-5.6044497!2d36.0143209!3e0?hl=ru
# –¢–∞—Ä–∏—Ñ–∞ => –õ–∏—Å—Å–∞–±–æ–Ω => –ü–æ—Ä—Ç—É, –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è => –ü–∞—Ä–∏–∂, –§—Ä–∞–Ω—Ü–∏—è (2561 –∫–º)

if distance_km_sum >= 84.8:
    travel_city = "–ñ–∏—Ç–æ–º–∏—Ä => –ù–æ–≤–æ–≥—Ä–∞–¥"
if distance_km_sum >= 1724:
    travel_city = "–ñ–∏—Ç–æ–º–∏—Ä => –†–æ–≤–Ω–æ => –õ—å–≤–æ–≤ => –ö—Ä–∞–∫–æ–≤ => Dolny Kubin => –ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞ => –ì—Ä–∞—Ü (–ê–≤—Å—Ç—Ä–∏—è) => Njivice, Krk"
    travel_next_city_distance_km = round(1987 - (distance_km_sum), 2)
    travel_next_city = "–í–µ–Ω–µ—Ü–∏—è –≤ –ò—Ç–∞–ª–∏–∏"
    travel_predict_next_city_days = math.ceil(travel_next_city_distance_km / distance_km_average)
if distance_km_sum >= 1987:
    travel_city = "–ñ–∏—Ç–æ–º–∏—Ä => –†–æ–≤–Ω–æ => –õ—å–≤–æ–≤ => –ö—Ä–∞–∫–æ–≤ => Dolny Kubin => –ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞ => –ì—Ä–∞—Ü (–ê–≤—Å—Ç—Ä–∏—è) => Njivice, Krk => –í–µ–Ω–µ—Ü–∏—è"
    travel_next_city_distance_km = round(2553 - (distance_km_sum), 2)
    travel_next_city = "–ù–∏—Ü—Ü–∞ –≤–æ –§—Ä–∞–Ω—Ü–∏–∏"
    travel_predict_next_city_days = math.ceil(travel_next_city_distance_km / distance_km_average)
if distance_km_sum >= 2553:
    travel_city = "–ñ–∏—Ç–æ–º–∏—Ä => –†–æ–≤–Ω–æ => –õ—å–≤–æ–≤ => –ö—Ä–∞–∫–æ–≤ => Dolny Kubin => –ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞ => –ì—Ä–∞—Ü (–ê–≤—Å—Ç—Ä–∏—è) => Njivice, Krk => –í–µ–Ω–µ—Ü–∏—è => –ù–∏—Ü—Ü–∞"
    travel_next_city_distance_km = round(3216 - (distance_km_sum), 2)
    travel_next_city = "–¢–∞—Ä–∏—Ñ–∞ –≤ –ò—Å–ø–∞–Ω–∏—è"
    travel_predict_next_city_days = math.ceil(travel_next_city_distance_km / distance_km_average)
if distance_km_sum >= 3216:
    travel_city = "–ñ–∏—Ç–æ–º–∏—Ä => –†–æ–≤–Ω–æ => –õ—å–≤–æ–≤ => –ö—Ä–∞–∫–æ–≤ => Dolny Kubin => –ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞ => –ì—Ä–∞—Ü (–ê–≤—Å—Ç—Ä–∏—è) => Njivice, Krk => –í–µ–Ω–µ—Ü–∏—è => –ù–∏—Ü—Ü–∞ => –ë–∞—Ä—Å–µ–ª–æ–Ω–∞"
    travel_next_city_distance_km = round(4337 - (distance_km_sum), 2)
    travel_next_city = "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞"
    travel_predict_next_city_days = math.ceil(travel_next_city_distance_km / distance_km_average)
if distance_km_sum >= 7391:
    travel_city = "–ñ–∏—Ç–æ–º–∏—Ä => –†–æ–≤–Ω–æ => –õ—å–≤–æ–≤ => –ö—Ä–∞–∫–æ–≤ => Dolny Kubin => –ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞ => –ì—Ä–∞—Ü (–ê–≤—Å—Ç—Ä–∏—è) => Njivice, Krk => –í–µ–Ω–µ—Ü–∏—è => –ê–ø–µ–Ω–Ω–∏–Ω—Å–∫–∏–π –ø–æ–ª—É–æ—Å—Ç—Ä–æ–≤ => –ù–∏—Ü—Ü–∞ => –ë–∞—Ä—Å–µ–ª–æ–Ω–∞ => –¢–∞—Ä–∏—Ñ–∞, –ò—Å–ø–∞–Ω–∏—è"
    travel_next_city_distance_km = round(8370 - (distance_km_sum), 2)
    travel_next_city = "–ü–∞—Ä–∏–∂ –≤–æ –§—Ä–∞–Ω—Ü–∏–∏"
    travel_predict_next_city_days = math.ceil(travel_next_city_distance_km / distance_km_average)
if distance_km_sum >= 8370:
    travel_city = "–ñ–∏—Ç–æ–º–∏—Ä => –†–æ–≤–Ω–æ => –õ—å–≤–æ–≤ => –ö—Ä–∞–∫–æ–≤ => Dolny Kubin => –ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞ => –ì—Ä–∞—Ü (–ê–≤—Å—Ç—Ä–∏—è) => Njivice, Krk => –í–µ–Ω–µ—Ü–∏—è => –ê–ø–µ–Ω–Ω–∏–Ω—Å–∫–∏–π –ø–æ–ª—É–æ—Å—Ç—Ä–æ–≤ => –ù–∏—Ü—Ü–∞ => –ë–∞—Ä—Å–µ–ª–æ–Ω–∞ => –¢–∞—Ä–∏—Ñ–∞, –ò—Å–ø–∞–Ω–∏—è => –ü–æ—Ä—Ç—É, –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è"
    travel_next_city_distance_km = round(12356 - (distance_km_sum), 2)
    travel_next_city = "–ü–∞—Ä–∏–∂ –≤–æ –§—Ä–∞–Ω—Ü–∏–∏"
    travel_predict_next_city_days = math.ceil(travel_next_city_distance_km / distance_km_average)
if distance_km_sum >= 12356:
    travel_city = "–ñ–∏—Ç–æ–º–∏—Ä => –õ—å–≤–æ–≤ => –ö—Ä–∞–∫–æ–≤ => Dolny Kubin => –ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞ => –ì—Ä–∞—Ü (–ê–≤—Å—Ç—Ä–∏—è) => Njivice, Krk => –í–µ–Ω–µ—Ü–∏—è => –ê–ø–µ–Ω–Ω–∏–Ω—Å–∫–∏–π –ø–æ–ª—É–æ—Å—Ç—Ä–æ–≤ => –ù–∏—Ü—Ü–∞ => –ë–∞—Ä—Å–µ–ª–æ–Ω–∞ => –¢–∞—Ä–∏—Ñ–∞ => –ü–∞—Ä–∏–∂"


# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
travel_steps_next_city = round(travel_next_city_distance_km / STEP_ONE_DISTANCE)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Å–ª–æ–≤–µ "–î–µ–Ω—å" –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏–≤–∞—Ä–æ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç—å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥.
if travel_predict_next_city_days == 1:
    travel_predict_word_ending_days = "–¥–µ–Ω—å"
elif travel_predict_next_city_days < 5:
    travel_predict_word_ending_days = "–¥–Ω—è"
else:
    travel_predict_word_ending_days = "–¥–Ω–µ–π"


############################################################
# –ê—á–∏–≤–∫–∏
############################################################
if is_setting_achievement == True:
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∞—á–∏–≤–æ–∫
    circle_icon = f'{Fore.LIGHTRED_EX}‚≠ï{Style.RESET_ALL}'
    accept_icon = f'{Fore.GREEN}‚úî{Style.RESET_ALL}'

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –∞—á–∏–≤–∫–∞–º–∏
    # –ê—á–∏–≤–∫–∏ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è.
    achieve_steps_more_10k_in_one_day = circle_icon
    achieve_steps_more_20k_in_one_day = circle_icon
    achieve_steps_more_30k_in_one_day = circle_icon
    achieve_steps_more_40k_in_one_day = circle_icon
    achieve_steps_more_50k_in_one_day = circle_icon
    achieve_steps_more_100k_in_one_day = circle_icon

    # –ê—á–∏–≤–∫–∏ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —à–∞–≥–∏ –≤ –æ–±—â–µ–º –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è.
    achieve_steps_more_10k_in_all_time = circle_icon
    achieve_steps_more_100k_in_all_time = circle_icon
    achieve_steps_more_1m_in_all_time = circle_icon
    achieve_steps_more_10m_in_all_time = circle_icon
    achieve_steps_more_25m_in_all_time = circle_icon
    achieve_steps_more_50m_in_all_time = circle_icon

    # –ê—á–∏–≤–∫–∏ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∫–º –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.
    achieve_km_more_1km_in_one_day = circle_icon
    achieve_km_more_5km_in_one_day = circle_icon
    achieve_km_more_10km_in_one_day = circle_icon
    achieve_km_more_20km_in_one_day = circle_icon
    achieve_km_more_42km_in_one_day = circle_icon
    achieve_km_more_50km_in_one_day = circle_icon

    # –ê—á–∏–≤–∫–∏ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∫–º –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è.
    achieve_km_more_10km_in_all_time = circle_icon
    achieve_km_more_100km_in_all_time = circle_icon
    achieve_km_more_500km_in_all_time = circle_icon
    achieve_km_more_1000km_in_all_time = circle_icon
    achieve_km_more_5000km_in_all_time = circle_icon
    achieve_km_more_10000km_in_all_time = circle_icon
    achieve_km_more_20000km_in_all_time = circle_icon

    def achievements_func():
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∞—á–∏–≤–æ–∫.

        def achievement_steps_in_one_day():
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞—á–∏–≤–æ–∫ –∑–∞ –∫–æ–ª-–≤–æ –ø—Ä–æ–π–¥–µ–Ω—ã—Ö —à–∞–≥–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–Ω—è.
            global achieve_steps_more_10k_in_one_day
            global achieve_steps_more_20k_in_one_day
            global achieve_steps_more_30k_in_one_day
            global achieve_steps_more_40k_in_one_day
            global achieve_steps_more_50k_in_one_day
            global achieve_steps_more_100k_in_one_day

            for i in STEPS:
                if i >= 10000:
                    achieve_steps_more_10k_in_one_day = accept_icon
                    if achieve_steps_more_10k_in_one_day == accept_icon: break
            for i in STEPS:
                if i >= 20000:
                    achieve_steps_more_20k_in_one_day = accept_icon
                    if achieve_steps_more_20k_in_one_day == accept_icon: break
            for i in STEPS:
                if i >= 30000:
                    achieve_steps_more_30k_in_one_day = accept_icon
                    if achieve_steps_more_30k_in_one_day == accept_icon: break
            for i in STEPS:
                if i >= 40000:
                    achieve_steps_more_40k_in_one_day = accept_icon
                    if achieve_steps_more_40k_in_one_day == accept_icon: break
            for i in STEPS:
                if i >= 50000:
                    achieve_steps_more_50k_in_one_day = accept_icon
                    if achieve_steps_more_50k_in_one_day == accept_icon: break
            for i in STEPS:
                if i >= 100000:
                    achieve_steps_more_100k_in_one_day = accept_icon
                    if achieve_steps_more_100k_in_one_day == accept_icon: break

        achievement_steps_in_one_day()

        def achievement_steps_in_all_time():
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞—á–∏–≤–æ–∫ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏.
            global achieve_steps_more_10k_in_all_time
            global achieve_steps_more_100k_in_all_time
            global achieve_steps_more_1m_in_all_time
            global achieve_steps_more_10m_in_all_time
            global achieve_steps_more_25m_in_all_time
            global achieve_steps_more_50m_in_all_time

            if sum(STEPS) >= 10000:
                achieve_steps_more_10k_in_all_time = accept_icon
            if sum(STEPS) >= 100000:
                achieve_steps_more_100k_in_all_time = accept_icon
            if sum(STEPS) >= 1000000:
                achieve_steps_more_1m_in_all_time = accept_icon
            if sum(STEPS) >= 10000000:
                achieve_steps_more_10m_in_all_time = accept_icon
            if sum(STEPS) >= 25000000:
                achieve_steps_more_25m_in_all_time = accept_icon
            if sum(STEPS) >= 50000000:
                achieve_steps_more_50m_in_all_time = accept_icon
        achievement_steps_in_all_time()

        def achievement_km_in_one_day():
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞—á–∏–≤–æ–∫ –∑–∞ –∫–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è
            global achieve_km_more_1km_in_one_day
            global achieve_km_more_5km_in_one_day
            global achieve_km_more_10km_in_one_day
            global achieve_km_more_20km_in_one_day
            global achieve_km_more_42km_in_one_day
            global achieve_km_more_50km_in_one_day

            if max(STEPS) * STEP_ONE_DISTANCE >= 1:
                achieve_km_more_1km_in_one_day = accept_icon
            if max(STEPS) * STEP_ONE_DISTANCE >= 5:
                achieve_km_more_5km_in_one_day = accept_icon
            if max(STEPS) * STEP_ONE_DISTANCE >= 10:
                achieve_km_more_10km_in_one_day = accept_icon
            if max(STEPS) * STEP_ONE_DISTANCE >= 20:
                achieve_km_more_20km_in_one_day = accept_icon
            if max(STEPS) * STEP_ONE_DISTANCE >= 42.195:
                achieve_km_more_42km_in_one_day = accept_icon
            if max(STEPS) * STEP_ONE_DISTANCE >= 50:
                achieve_km_more_50km_in_one_day = accept_icon
        achievement_km_in_one_day()

        def achievement_km_in_all_time():
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—á–∏–≤–æ–∫ –∑–∞ –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∫–º.
            global achieve_km_more_10km_in_all_time
            global achieve_km_more_100km_in_all_time
            global achieve_km_more_500km_in_all_time
            global achieve_km_more_1000km_in_all_time
            global achieve_km_more_5000km_in_all_time
            global achieve_km_more_10000km_in_all_time
            global achieve_km_more_20000km_in_all_time

            if distance_km_sum >= 10:
                achieve_km_more_10km_in_all_time = accept_icon
            if distance_km_sum >= 100:
                achieve_km_more_100km_in_all_time = accept_icon
            if distance_km_sum >= 500:
                achieve_km_more_500km_in_all_time = accept_icon
            if distance_km_sum >= 1000:
                achieve_km_more_1000km_in_all_time = accept_icon
            if distance_km_sum >= 5000:
                achieve_km_more_5000km_in_all_time = accept_icon
            if distance_km_sum >= 10000:
                achieve_km_more_10000km_in_all_time = accept_icon
            if distance_km_sum >= 20000:
                achieve_km_more_20000km_in_all_time = accept_icon
        achievement_km_in_all_time()

    achievements_func()


############################################################
# –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
############################################################

def steps_graph():
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤.
    plt.style.use('seaborn')
    fig, ax = plt.subplots(figsize=(14, 6))
    plt.subplots_adjust(left=0.07, right=0.97, bottom=0.08, top=0.95, wspace=0.17)

    ax.plot(STEPS, linewidth = 1, c=(0, 0.7, 1), label='–®–∞–≥–æ–≤ –≤ –¥–µ–Ω—å')
    ax.plot(days_median_steps, linewidth = 1.3, c=(0.8, 0, 0.2), label='–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è')
    ax.plot(days_average_30_graph, linewidth = 1.3, c=(0.6, 0, 0.5), label='–°—Ä–µ–¥–Ω–µ–µ –∑–∞ 30 –¥–Ω–µ–π')
    ax.plot(days_average_180_graph, linewidth = 1.3, c=(0.2, 0.2, 1), label='–°—Ä–µ–¥–Ω–µ–µ –∑–∞ 180 –¥–Ω–µ–π')
    ax.plot(days_average_360_graph, linewidth = 1.3, c=(0.2, 0.9, 0.2), label='–°—Ä–µ–¥–Ω–µ–µ –∑–∞ 360 –¥–Ω–µ–π')
    ax.plot(days_average_steps, linewidth = 1.3, c=('black'), label='–°—Ä–µ–¥–Ω–µ–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è')

    ax.legend()

    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–∏–∞–≥—Ä–∞–º—ã –∏ –º–µ—Ç–æ–∫ –æ—Å–µ–π.
    ax.set_title("–ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤", fontsize = 12)
    ax.set_xlabel("–î–µ–Ω—å", fontsize = 10)
    ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å", fontsize = 10)

    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å—è—Ö
    ax.tick_params(axis='both', labelsize = 10)
    ax.set_facecolor('seashell')

    plt.show()


def bar_days_week_average():
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —à–∞–≥–∞–º –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏.
    plt.style.use('seaborn-pastel')
    fig, ax = plt.subplots(figsize=(10, 6))
    plt.subplots_adjust(left=0.09, right=0.97, bottom=0.08, top=0.95, wspace=0.17)

    x = ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ")
    y_day_average = (day_monday_average, day_tuesday_average, day_wednesday_average, day_tuesday_average, day_friday_average, day_saturday_average, day_sunday_average)
    y_day_median = (day_monday_median, day_tuesday_median, day_wednesday_median, day_thursday_median, day_friday_median, day_saturday_median, day_sunday_median)
    y_day_max = (max(day_monday), max(day_tuesday), max(day_wednesday), max(day_thursday), max(day_friday), max(day_saturday), max(day_sunday))
    y_day_min = (min(day_monday), min(day_tuesday), min(day_wednesday), min(day_thursday), min(day_friday), min(day_saturday), min(day_sunday))

    ax.bar(x, y_day_max, color=(0.5, 0.5, 1), edgecolor='black', linewidth=1, label='Max')
    ax.bar(x, y_day_median, color=(0, 0.7, 0.3), edgecolor='black', linewidth=1, label='Median')
    ax.bar(x, y_day_average, color=(0.3, 0.9, 0.4), edgecolor='black', linewidth=1, label='Average')
    ax.bar(x, y_day_min, color=(0.9, 0.3, 0.5), edgecolor='black', linewidth=1, label='Min')

    ax.set_title("–ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", fontsize=12)
    ax.set_xlabel("–î–Ω–∏ –Ω–µ–¥–µ–ª–∏", fontsize=10)
    ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å", fontsize=10)

    ax.set_facecolor('seashell')
    plt.legend()

    plt.show()


def bar_hours_stat_steps():
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–Ω—è.
    plt.style.use('seaborn-pastel')
    fig, ax = plt.subplots(figsize=(14,6))
    plt.subplots_adjust(left=0.05, right=0.985, bottom=0.07, top=0.95, wspace=0.17)

    x_axis = (
        '00:00-00:59', '01:00-01:59', '02:00-02:59', '03:00-03:59', '04:00-04:59', '05:00-05.59', '06:00-06.59',
        '07:00-07.59', '08:00-08.59', '09:00-09.59', '10:00-10.59', '11:00-11.59', '12:00-12.59', '13:00-13.59',
        '14:00-14.59', '15:00-15.59', '16:00-16.59', '17:00-17.59', '18:00-18.59', '19:00-19.59', '20:00-20.59',
        '21:00-21.59', '22:00-2.59', '23:00-23.59',
    )
    y_hour_steps = [
        sum(hour_stat_steps['00:00-00:59']), sum(hour_stat_steps['01:00-01:59']), sum(hour_stat_steps['02:00-02:59']),
        sum(hour_stat_steps['03:00-03:59']), sum(hour_stat_steps['04:00-04:59']), sum(hour_stat_steps['05:00-05:59']),
        sum(hour_stat_steps['06:00-06:59']), sum(hour_stat_steps['07:00-07:59']), sum(hour_stat_steps['08:00-08:59']),
        sum(hour_stat_steps['09:00-09:59']), sum(hour_stat_steps['10:00-10:59']), sum(hour_stat_steps['11:00-11:59']),
        sum(hour_stat_steps['12:00-12:59']), sum(hour_stat_steps['13:00-13:59']), sum(hour_stat_steps['14:00-14:59']),
        sum(hour_stat_steps['15:00-15:59']), sum(hour_stat_steps['16:00-16:59']), sum(hour_stat_steps['17:00-17:59']),
        sum(hour_stat_steps['18:00-18:59']), sum(hour_stat_steps['19:00-19:59']), sum(hour_stat_steps['20:00-20:59']),
        sum(hour_stat_steps['21:00-21:59']), sum(hour_stat_steps['22:00-22:59']), sum(hour_stat_steps['23:00-23:59']),
    ]

    ax.bar(x_axis, y_hour_steps, color=(0.4, 0.5, 1), edgecolor='black', linewidth=1, label='–®–∞–≥–∏')

    ax.set_title("–ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤ –ø–æ —á–∞—Å–∞–º –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–Ω—è", fontsize=12)
    ax.set_xlabel("–í—Ä–µ–º—è –¥–Ω—è", fontsize=12)
    ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ –æ–¥–∏–Ω —á–∞—Å", fontsize=12)

    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —É –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ (00:00-00:59)
    for label in (ax.get_xticklabels()):
        label.set_fontsize(5.75)

    ax.set_facecolor('seashell')
    plt.show()


def bar_month_year_stat_steps():
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–Ω—è.
    plt.style.use('seaborn-pastel')
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))
    plt.subplots_adjust(left=0.07, right=0.97, bottom=0.08, top=0.95, wspace=0.17)

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    x_axis = ('–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
              '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    )
    y_month_average = (
        sum(month_stat_steps['—è–Ω–≤–∞—Ä—å']) / len(month_stat_steps['—è–Ω–≤–∞—Ä—å']),
        sum(month_stat_steps['—Ñ–µ–≤—Ä–∞–ª—å']) / len(month_stat_steps['—Ñ–µ–≤—Ä–∞–ª—å']),
        sum(month_stat_steps['–º–∞—Ä—Ç']) / len(month_stat_steps['–º–∞—Ä—Ç']),
        sum(month_stat_steps['–∞–ø—Ä–µ–ª—å']) / len(month_stat_steps['–∞–ø—Ä–µ–ª—å']),
        sum(month_stat_steps['–º–∞–π']) / len(month_stat_steps['–º–∞–π']),
        sum(month_stat_steps['–∏—é–Ω—å']) / len(month_stat_steps['–∏—é–Ω—å']),
        sum(month_stat_steps['–∏—é–ª—å']) / len(month_stat_steps['–∏—é–ª—å']),
        sum(month_stat_steps['–∞–≤–≥—É—Å—Ç']) / len(month_stat_steps['–∞–≤–≥—É—Å—Ç']),
        sum(month_stat_steps['—Å–µ–Ω—Ç—è–±—Ä—å']) / len(month_stat_steps['—Å–µ–Ω—Ç—è–±—Ä—å']),
        sum(month_stat_steps['–æ–∫—Ç—è–±—Ä—å']) / len(month_stat_steps['–æ–∫—Ç—è–±—Ä—å']),
        sum(month_stat_steps['–Ω–æ—è–±—Ä—å']) / len(month_stat_steps['–Ω–æ—è–±—Ä—å']),
        sum(month_stat_steps['–¥–µ–∫–∞–±—Ä—å']) / len(month_stat_steps['–¥–µ–∫–∞–±—Ä—å'])
    )

    y_month_max = (
        max(month_stat_steps['—è–Ω–≤–∞—Ä—å']), max(month_stat_steps['—Ñ–µ–≤—Ä–∞–ª—å']), max(month_stat_steps['–º–∞—Ä—Ç']),
        max(month_stat_steps['–∞–ø—Ä–µ–ª—å']), max(month_stat_steps['–º–∞–π']), max(month_stat_steps['–∏—é–Ω—å']),
        max(month_stat_steps['–∏—é–ª—å']), max(month_stat_steps['–∞–≤–≥—É—Å—Ç']), max(month_stat_steps['—Å–µ–Ω—Ç—è–±—Ä—å']),
        max(month_stat_steps['–æ–∫—Ç—è–±—Ä—å']), max(month_stat_steps['–Ω–æ—è–±—Ä—å']), max(month_stat_steps['–¥–µ–∫–∞–±—Ä—å'])
    )

    y_month_min = (
        min(month_stat_steps['—è–Ω–≤–∞—Ä—å']), min(month_stat_steps['—Ñ–µ–≤—Ä–∞–ª—å']), min(month_stat_steps['–º–∞—Ä—Ç']),
        min(month_stat_steps['–∞–ø—Ä–µ–ª—å']), min(month_stat_steps['–º–∞–π']), min(month_stat_steps['–∏—é–Ω—å']),
        min(month_stat_steps['–∏—é–ª—å']), min(month_stat_steps['–∞–≤–≥—É—Å—Ç']), min(month_stat_steps['—Å–µ–Ω—Ç—è–±—Ä—å']),
        min(month_stat_steps['–æ–∫—Ç—è–±—Ä—å']), min(month_stat_steps['–Ω–æ—è–±—Ä—å']), min(month_stat_steps['–¥–µ–∫–∞–±—Ä—å'])
    )

    ax1.bar(x_axis, y_month_max, edgecolor='black', linewidth=1, label='–ú–∞–∫—Å. –≤ –¥–µ–Ω—å')
    ax1.bar(x_axis, y_month_average, edgecolor='black', linewidth=1, label='–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤')
    ax1.bar(x_axis, y_month_min, edgecolor='black', linewidth=1, label='–ú–∏–Ω. –≤ –¥–µ–Ω—å')

    ax1.set_title("–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º", fontsize=12)
    ax1.set_xlabel("–ú–µ—Å—è—Ü", fontsize=12)
    ax1.set_ylabel("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –º–µ—Å—è—Ü–∞", fontsize=12)

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞. –î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥–∞–º.

    x_axis_year = ('2018', '2019', '2020', '2021', '2022')
    y_steps_average = (
        sum(year_stat_steps['2018']) // len(year_stat_steps['2018']),
        sum(year_stat_steps['2019']) // len(year_stat_steps['2019']),
        sum(year_stat_steps['2020']) // len(year_stat_steps['2020']),
        sum(year_stat_steps['2021']) // len(year_stat_steps['2021']),
        sum(year_stat_steps['2022']) // len(year_stat_steps['2022'])
    )

    y_year_max = (
        max(year_stat_steps['2018']), max(year_stat_steps['2019']), max(year_stat_steps['2020']),
        max(year_stat_steps['2021']), max(year_stat_steps['2022'])
    )

    y_year_min = (
        min(year_stat_steps['2018']), min(year_stat_steps['2019']), min(year_stat_steps['2020']),
        min(year_stat_steps['2021']), min(year_stat_steps['2022'])
    )

    ax2.bar(x_axis_year, y_year_max, edgecolor='black', linewidth=1, label='–ú–∞–∫—Å. –≤ –¥–µ–Ω—å –∑–∞ –≥–æ–¥')
    ax2.bar(x_axis_year, y_steps_average, edgecolor='black', linewidth=1, label='–°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å –∑–∞ –≥–æ–¥')
    ax2.bar(x_axis_year, y_year_min, edgecolor='black', linewidth=1, label='–ú–∏–Ω. –≤ –¥–µ–Ω—å –∑–∞ –≥–æ–¥')

    ax2.set_title("–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤ –ø–æ –≥–æ–¥–∞–º", fontsize=12)
    ax2.set_xlabel("–ì–æ–¥", fontsize=12)
    ax2.set_ylabel("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≥–æ–¥–∞", fontsize=12)

    ax1.set_facecolor('seashell')
    ax2.set_facecolor('seashell')
    ax1.legend(fontsize=8)
    ax2.legend(fontsize=8)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤.
    for label in (ax1.get_xticklabels()):
        label.set_fontsize(7)

    plt.show()


############################################
# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
############################################
print("üèÉ üöó")
print(Fore.CYAN + "===============================================" + Style.RESET_ALL + Fore.MAGENTA + "===" + Style.RESET_ALL)

print(f"–í—Å–µ–≥–æ –∑–∞ {Fore.MAGENTA}{len(STEPS):,.0f}{Style.RESET_ALL} –¥–Ω—è –ø—Ä–æ–π–¥–µ–Ω–æ - {Fore.GREEN}{steps_sum:,.0f}{Style.RESET_ALL} —à–∞–≥–æ–≤. (–í—á–µ—Ä–∞: + {Fore.LIGHTGREEN_EX}{(STEPS[-1]):,.0f}{Style.RESET_ALL}) ({challenge_average}{str(percentage_difference_round)} %{Style.RESET_ALL}) {challenge_row} :: (Min: {Fore.RED}{steps_min:,.0f}{Style.RESET_ALL} / Max: {Fore.GREEN}{steps_max:,.0f}{Style.RESET_ALL}).")

print(f"–í —Å—Ä–µ–¥–Ω–µ–º, –≤ –¥–µ–Ω—å: {Fore.LIGHTGREEN_EX}{steps_average:,.0f}{Style.RESET_ALL} {steps_average_day_changes_color}({steps_average_day_changes_sing}{steps_average_day_changes}){Style.RESET_ALL} —à–∞–≥–æ–≤. (–ó–∞–ø–∞—Å: {stock_steps_to_10k_per_day_color}{stock_steps_to_10k_per_day:,.0f}{Style.RESET_ALL} —à–∞–≥–∞).")
print((f"–°—Ä–µ–¥–Ω—è—è –º–µ–¥–∏–∞–Ω–Ω–∞—è: {Fore.LIGHTGREEN_EX}{statistics.median(STEPS):,.0f}{Style.RESET_ALL} {steps_median_day_changes_color}({steps_median_day_changes_sing}{steps_median_day_changes}){Style.RESET_ALL} —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å."))

print(f"\n–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {Fore.LIGHTBLUE_EX}{distance_km_sum:,.0f}{Style.RESET_ALL} –∫–º (+ {str(distance_day_km)} –∫–º).")
print(f"–í —Å—Ä–µ–¥–Ω–µ–º: {Fore.LIGHTBLUE_EX}{str(distance_km_average)}{Style.RESET_ALL} –∫–º –≤ –¥–µ–Ω—å {distance_km_average_diff_in_m_color}({distance_km_average_diff_in_m_sign}{distance_km_average_diff_in_m} –º){Style.RESET_ALL}.")

print(f"\n–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ: \n\t-- 30 –¥–Ω–µ–π: {Fore.GREEN}{steps_average_last_30_days:,.0f}{Style.RESET_ALL} {steps_average_last_30_days_change_color}({steps_average_last_30_days_change_sign}{steps_average_last_30_days_change}){Style.RESET_ALL} —à–∞–≥–æ–≤; "
      f"\n\t-- 90 –¥–Ω–µ–π: {Fore.GREEN}{steps_average_last_90_days:,.0f}{Style.RESET_ALL} {steps_average_last_90_days_change_color}({steps_average_last_90_days_change_sign}{steps_average_last_90_days_change}){Style.RESET_ALL} —à–∞–≥–æ–≤; "
      f"\n\t-- 180 –¥–Ω–µ–π: {Fore.GREEN}{steps_average_last_180_days:,.0f}{Style.RESET_ALL} {steps_average_last_180_days_change_color}({steps_average_last_180_days_change_sign}{steps_average_last_180_days_change}){Style.RESET_ALL} —à–∞–≥–æ–≤; "
      f"\n\t-- 360 –¥–Ω–µ–π: {Fore.GREEN}{steps_average_last_360_days:,.0f}{Style.RESET_ALL} {steps_average_last_360_days_change_color}({steps_average_last_360_days_change_sign}{steps_average_last_360_days_change}){Style.RESET_ALL} —à–∞–≥–æ–≤;")

print(f"\n–ú–∞—Ä—à—Ä—É—Ç –ø—Ä–æ—à–µ–ª –ø–æ –≥–æ—Ä–æ–¥–∞–º: {travel_city}")
print(f"–î–æ –≥–æ—Ä–æ–¥–∞ {Fore.LIGHTGREEN_EX}{travel_next_city}{Style.RESET_ALL} –æ—Å—Ç–∞–ª–æ—Å—å: {Fore.CYAN}{travel_next_city_distance_km:,.0f}{Style.RESET_ALL} –∫–º, –∏–ª–∏ {Fore.GREEN}{travel_steps_next_city:,.0f}{Style.RESET_ALL} —à–∞–≥–∞. –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ, –ø—Ä–∏–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ {Fore.CYAN}{travel_predict_next_city_days}{Style.RESET_ALL} {travel_predict_word_ending_days}.")

print(f"\n–ù–∞ —Ö–æ–¥—å–±—É –∑–∞—Ç—Ä–∞—á–µ–Ω–æ: {Fore.CYAN}{kcal_sum:,.0f}{Style.RESET_ALL} kcal, (–≤—á–µ—Ä–∞ {kcal_last_day} kcal).")
print(f"–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: {Fore.CYAN}{kcal_to_fat}{Style.RESET_ALL} –∫–≥ –∂–∏—Ä–∞, {Fore.CYAN}{kwt_sum}{Style.RESET_ALL} –∫–í—Ç, {Fore.CYAN}{petrol_economy_liter}{Style.RESET_ALL} –ª –±–µ–Ω–∑–∏–Ω–∞, –∏–ª–∏ {Fore.CYAN}{big_mac_used:,.0f}{Style.RESET_ALL} Big Mac.")

print(f"\n–ß–µ–ª–µ–Ω–¥–∂ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ {Fore.CYAN}{challenge_last_days_go_on}{Style.RESET_ALL} –¥–Ω–µ–π. üèÅ{(10 - challenge_last_days_go_on) * '_'}{Fore.LIGHTCYAN_EX}üèÉ{Style.RESET_ALL}{challenge_last_days_go_on * '_'}üö©. –ó–∞ –≤—á–µ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–æ {challenge_last_day} 10–∫ —à–∞–≥–æ–≤.")
print(f"–°–∞–º—ã–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏ –ø–æ –¥–Ω—è–º: {Fore.CYAN}{sorted(days_challenge_complete_row, reverse=True)[:10]}{Style.RESET_ALL}.")
print(f"–ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {Fore.CYAN}{steps_more_10k:,.0f}{Style.RESET_ALL} –∏–∑ {Fore.CYAN}{len(STEPS):,.0f}{Style.RESET_ALL} –¥–Ω–µ–π ({Fore.CYAN}{(round(percent_steps_more_10k, 2))}{Style.RESET_ALL} %), –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 10–∫ —à–∞–≥–æ–≤, –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–Ω—è.")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å –≤ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏.
if is_setting_days_week_average == True:
    print(f"\n--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∏ –º–µ–¥–∏–∞–Ω–Ω–æ–º—É –∫–æ–ª-–≤—É —à–∞–≥–æ–≤, –≤ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏: ---")
    for day, value in avarage_steps_days_of_week.items():
        print(f"\t- {day.title()} - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {Fore.CYAN}{value['average_day']:,.0f}{Style.RESET_ALL}; –º–µ–¥–∏–∞–Ω–Ω–æ–µ: {Fore.GREEN}{value['median_day']:,.0f}{Style.RESET_ALL} :: Min: {Fore.RED}{value['min_day']:,.0f}{Style.RESET_ALL} / Max: {Fore.GREEN}{value['max_day']:,.0f}{Style.RESET_ALL}.")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–ª-–≤—É —à–∞–≥–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Å –¥–Ω—è.
if is_setting_hour_statistics == True:
    print(f"\n--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª-–≤—É —à–∞–≥–æ–≤ –ø–æ —á–∞—Å–∞–º –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–Ω—è: ---")
    for day_time, value in hour_stat_steps.items():
        print(f"\t- {day_time} - –ü—Ä–æ–π–¥–µ–Ω–æ: {Fore.GREEN}{sum(value):,.0f}{Style.RESET_ALL} —à–∞–≥–æ–≤. ({Fore.LIGHTBLUE_EX}{(sum(value) / hour_stat_steps_sum) * 100:,.2f}{Style.RESET_ALL} %)")

# –û—Ç–æ–±—Ä–∞–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–ª-–≤—É —à–∞–≥–æ–≤ –≤ —Ä–∞–∑–Ω—ã–µ –º–µ—Å—è—Ü—ã.
if is_setting_month_year_stat_steps == True:
    print(f"\n --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª-–≤—É —à–∞–≥–æ–≤ –≤ —Ä–∞–∑–Ω—ã–µ –º–µ—Å—è—Ü—ã: ---")
    for month, value in month_stat_steps.items():
        print(f"\t - {Fore.LIGHTCYAN_EX}{month.title()}{Style.RESET_ALL}, –≤ —Å—Ä–µ–¥–Ω–µ–º: {Fore.GREEN}{int(sum(value) / len(value)):,.0f}{Style.RESET_ALL} —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å. "
              f":: (Min: {Fore.LIGHTRED_EX}{min(value):,.0f}{Style.RESET_ALL} / Max: {Fore.LIGHTGREEN_EX}{max(value):,.0f}{Style.RESET_ALL}) "
              f":: ({Fore.LIGHTBLUE_EX}{(sum(value) / month_stat_steps_sum) * 100:,.2f}{Style.RESET_ALL} %).")

    print("\n --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª-–≤—É —à–∞–≥–æ–≤ –≤ —Ä–∞–∑–Ω—ã–µ –≥–æ–¥–∞: ---")
    for year, value in year_stat_steps.items():
        print(f"\t - {Fore.LIGHTCYAN_EX}{year}{Style.RESET_ALL} –≥–æ–¥, –ø—Ä–æ–π–¥–µ–Ω–æ: {Fore.GREEN}{sum(value):,.0f}{Style.RESET_ALL}, —á—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º: {Fore.GREEN}{int(sum(value) / len(value)):,.0f}{Style.RESET_ALL} —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å."
              f" :: (Min: {Fore.LIGHTRED_EX}{min(value):,.0f}{Style.RESET_ALL} / Max: {Fore.LIGHTGREEN_EX}{max(value):,.0f}{Style.RESET_ALL})"
              f" :: ({Fore.LIGHTBLUE_EX}{sum(value) / year_stat_steps_sum * 100:,.2f}{Style.RESET_ALL} %).")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∞—á–∏–≤–æ–∫.
if is_setting_achievement == True:
    print(f'\n{"=" * 134}')
    print(f'- –ü—Ä–æ–π–¥–µ–Ω–æ —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å:        10–∫ - {achieve_steps_more_10k_in_one_day}, 20–∫ - {achieve_steps_more_20k_in_one_day}, 30–∫ - {achieve_steps_more_30k_in_one_day}, 40–∫ - {achieve_steps_more_40k_in_one_day}, 50–∫ - {achieve_steps_more_50k_in_one_day}, 100–∫ - {achieve_steps_more_100k_in_one_day}.')
    print(f'- –ü—Ä–æ–π–¥–µ–Ω–æ —à–∞–≥–æ–≤ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥: 10–∫ - {achieve_steps_more_10k_in_all_time}, 100–∫ - {achieve_steps_more_100k_in_all_time}, 1–ú - {achieve_steps_more_1m_in_all_time}, 10–ú - {achieve_steps_more_10m_in_all_time}, 25–ú - {achieve_steps_more_25m_in_all_time}, 50–ú - {achieve_steps_more_50m_in_all_time}.')

    print(f'\n- –ü—Ä–æ–π–¥–µ–Ω–æ –∫–º –∑–∞ –¥–µ–Ω—å:           1 –∫–º - {achieve_km_more_1km_in_one_day}, 5 –∫–º - {achieve_km_more_5km_in_one_day}, 10 –∫–º - {achieve_km_more_10km_in_one_day}, 20 –∫–º - {achieve_km_more_20km_in_one_day}, 42.2 –∫–º - {achieve_km_more_42km_in_one_day}, 50 –∫–º - {achieve_km_more_50km_in_one_day}.')
    print(f'- –ü—Ä–æ–π–¥–µ–Ω–æ –∫–º –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:      10 –∫–º - {achieve_km_more_10km_in_all_time}, 100 –∫–º - {achieve_km_more_100km_in_all_time}, 500 –∫–º - {achieve_km_more_500km_in_all_time}, 1.000 –∫–º - {achieve_km_more_1000km_in_all_time}, 5.000 –∫–º - {achieve_km_more_5000km_in_all_time}, 10.000 –∫–º - {achieve_km_more_10000km_in_all_time}, 20.000 –∫–º {achieve_km_more_20000km_in_all_time}.')

    print(f'{"=" * 134}')

# –í—ã–≤–æ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.
if is_settings_steps_graph == True:        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤.
    steps_graph()
if is_setting_days_week_average == True:   # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —à–∞–≥–∞–º –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏.
    bar_days_week_average()
if is_setting_hour_statistics == True:     # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —à–∞–≥–∞–º –≤ —Ä–∞–∑–Ω—ã–µ —á–∞—Å—ã, –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–Ω—è.
    bar_hours_stat_steps()
if is_setting_month_year_stat_steps == True:    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª-–≤–∞ —à–∞–≥–æ–≤ –∑–∞ –º–µ—Å—è—Ü.
    bar_month_year_stat_steps()


print(Fore.LIGHTCYAN_EX + "\n==============================================="+ Style.RESET_ALL)
print(f"–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞: {time.time() - start_time:,.3f} —Å–µ–∫—É–Ω–¥—ã.")

